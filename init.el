(add-to-list 'load-path "~/.emacs.d/el-get/el-get")

(defvar my:el-get-disabled-packages nil
  "List of packages not intended to be installed/loaded.")

(if (not (require 'el-get nil t))
    (url-retrieve
     "https://github.com/dimitri/el-get/raw/master/el-get-install.el"
     (lambda (s)
       (let (el-get-master-branch)
         (end-of-buffer)
         (eval-print-last-sexp))
       (load-file "~/.emacs.d/init.el")))

  (setq el-get-sources
        '((:name async
                 :description "Simple library for asynchronous processing in Emacs"
                 :type github
                 :pkgname "jwiegley/emacs-async"
                 :features async)
          (:name base16-themes
                 :description "Base16 provides carefully chosen syntax highlighting and a default set of sixteen colors suitable for a wide range of applications."
                 :website "http://chriskempson.github.io/base16/"
                 :type github
                 :pkgname "neil477/base16-emacs"
                 :post-init (add-to-list 'custom-theme-load-path
                                         default-directory))
          (:name jedi
                 :description "An awesome Python auto-completion for Emacs"
                 :type github
                 :pkgname "tkf/emacs-jedi"
                 :build (("PYTHON=python2" "make" "requirements"))
                 :submodule nil
                 :depends (epc auto-complete))
          (:name magit
                 :website "https://github.com/magit/magit#readme"
                 :description "It's Magit! An Emacs mode for Git."
                 :type github
                 :pkgname "magit/magit"
                 :info "."
                 ;; let el-get care about autoloads so that it works with all OSes
                 :build (if (version-list-<= (version-to-list "24.3") (version-to-list emacs-version))
                            `(("make" ,(format "EMACS=%s" el-get-emacs) "all"))
                          `(("make" ,(format "EMACS=%s" el-get-emacs) "docs")))
                 :build/berkeley-unix (("touch" "`find . -name Makefile`") ("gmake")))
          (:name startupd
                 :description "Modular loading of Emacs configuration"
                 :type github
                 :pkgname "fgallina/startupd.el"
                 :features startupd)
          (:name python
                 :description "Python's flying circus support for Emacs"
                 :type github
                 :branch "emacs-24"
                 :pkgname "fgallina/python.el")
          (:name python-django
                 :description "An Emacs package for managing Django projects"
                 :type github
                 :pkgname "fgallina/python-django.el"
                 :features python-django)
          (:name region-bindings-mode
                 :description "A minor mode that enables custom bindings when mark is active."
                 :type github
                 :pkgname "fgallina/region-bindings-mode"
                 :features region-bindings-mode)
	  )
        el-get-user-package-directory "~/.emacs.d/conf")

  (setq my:el-get-packages
        '(ace-jump-mode
          async
          base16-themes
          clojure-mode
          coffee-mode
          deft
          dired-details
          expand-region
          full-ack
          gh
          gist
          jedi
          jquery-doc
          lua-mode
          magit
          markdown-mode
          auto-complete
          multiple-cursors
          paredit
          php-mode-improved
          python
          python-django
          rainbow-mode
          region-bindings-mode
          scss-mode
          smex
          smart-tab
          startupd
          yaml-mode
          yasnippet
          zencoding-mode))

  ;; Lie to package.el, all autoloads are generated by el-get.
  (setq package--initialized t)
  (load "~/.emacs.d/pre-startup.el" 'noerror)

  ;; Set common PATHs to search for executables.
  (let ((bindirs (list
                  (expand-file-name "~/.emacs.d/bin")
                  (expand-file-name "~/bin"))))
    (dolist (dir bindirs)
      (setenv "PATH" (concat dir path-separator (getenv "PATH")))
      (add-to-list 'exec-path dir)))

  (when my:el-get-disabled-packages
    (let ((package-list (copy-list my:el-get-packages)))
      (setq my:el-get-packages nil)
      (dolist (package package-list)
        (when (not (memq package my:el-get-disabled-packages))
          (setq my:el-get-packages
                (cons package my:el-get-packages)))))
    (setq my:el-get-packages (reverse my:el-get-packages)))

  (el-get 'sync my:el-get-packages)
  (startupd-load-files)
  (load "~/.emacs.d/secrets.el" 'noerror)
  (load "~/.emacs.d/post-startup.el" 'noerror)

  (setq custom-file "~/.emacs.d/customizations.el")
  (load custom-file 'noerror))

  (load "~/.emacs.d/undo-tree.el" 'noerror)
  (global-undo-tree-mode 1)

  (load "~/.emacs.d/alias.pl" 'noerror)

